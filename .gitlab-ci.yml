# Используем официальный образ с JDK 11
image: openjdk:11

# Общие переменные
variables:
  ANDROID_SDK_ROOT: "$CI_PROJECT_DIR/android-sdk"
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"

# Кэшируем Gradle и SDK между сборками
cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - .gradle/
    - android-sdk/

stages:
  - setup
  - build
  - test

# Шаг подготовки SDK (выполняется один раз в каждом pipeline)
setup_sdk:
  stage: setup
  script:
    # Устанавливаем необходимые утилиты
    - apt-get update -qq
    - apt-get install -y -qq wget unzip
    # Скачиваем и распаковываем command line tools
    - mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
    - wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
    - unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
    - rm cmdline-tools.zip
    # Принимаем лицензии
    - yes | "$ANDROID_SDK_ROOT/cmdline-tools/tools/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --licenses
    # Устанавливаем платформы и билд-тулз
    - "$ANDROID_SDK_ROOT/cmdline-tools/tools/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-33" "build-tools;33.0.2"
  artifacts:
    paths:
      - android-sdk/

# Сборка APK
build:
  stage: build
  script:
    - ./gradlew assembleDebug --no-daemon
  artifacts:
    paths:
      - app/build/outputs/apk/debug/*.apk

# Тесты и отчёты покрытия
test:
  stage: test
  script:
    # Запуск unit-тестов и генерация покрытия
    - ./gradlew testDebugUnitTest jacocoTestReport --no-daemon
  artifacts:
    reports:
      junit: app/build/test-results/testDebugUnitTest/*.xml
    paths:
      - app/build/reports/jacoco/
